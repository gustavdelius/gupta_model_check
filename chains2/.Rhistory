chain <- chain[chain$sampno >= mcmcPars1["adaptive_period"],2:(ncol(chain)-1)]
covMat <- cov(chain)
mvrPars <- list(covMat,0.5,w=0.8)
## Start from best location of previous chain
startTab$values <- best_pars
## Run second chain
output <- run_MCMC(parTab=startTab, data=obs_deaths, mcmcPars=mcmcPars2, filename=filename_tmp,
CREATE_POSTERIOR_FUNC = create_lik,PRIOR_FUNC=prior_func, t=t_long,
PRIOR_ONLY=prior_only, mvrPars=mvrPars)
}
}
## Read in the MCMC chains
setwd(top_wd)
setwd("chains2")
all_runs <- list.files()
all_chains <- NULL
for(run in all_runs){
chains <- load_mcmc_chains(paste0(top_wd, "/chains2/",run),parTab,TRUE,1,mcmcPars2["adaptive_period"])
tmp_chain <- as.data.frame(chains[[2]])
tmp_chain$sampno <- 1:nrow(tmp_chain)
tmp_chain$run <- run
tmp_chain <- reshape2::melt(tmp_chain, id.vars=c("sampno","run"))
all_chains <- rbind(all_chains, tmp_chain)
#pdf(paste0(top_wd,"/",run,"_chains.pdf"))
#plot(chains[[1]])
#dev.off()
}
getwd()
## Calculate 95% CI on proportion infected
setwd(top_wd)
setwd("chains2")
run <- "fitting_lourenco2/"
chains <- load_mcmc_chains(paste0(top_wd, "/chains2/",run),parTab,FALSE,1,mcmcPars2["adaptive_period"])
chain <- as.data.frame(chains[[2]])
chain$sampno <- 1:nrow(chain)
samps <- sample(unique(chain$sampno), 100)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(100)
rhos <- numeric(100)
plot(res$z.N~res$time,type='l',ylim=c(0,10))
res <- solve_model2(pars, t_long)
plot(res$z.N~res$time,type='l',ylim=c(0,10))
plot(res$z.N~res$time,type='l',ylim=c(0,1))
res[res$time == "2020-03-06",]
res <- solve_model2(pars, t_long)
res
1/N
plot(res$y.N~res$time)
plot(res$z.N~res$time)
prop_infected <- numeric(100)
rhos <- numeric(100)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
predicted <- (solve_model(pars, t_long))
## Get deaths that match data
predicted1 <-  predicted %>%
filter(time <= max_time & time >= min_time) %>% pull(Dead)
print(sum(predicted1))
lines(res$z.N~res$time)
rhos[i] <- pars["rho"]
prop_infected[i] <- res[res$time == "2020-03-06","z.N"]
}
prop_infected <- numeric(100)
rhos <- numeric(100)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
lines(res$z.N~res$time)
rhos[i] <- pars["rho"]
prop_infected[i] <- res[res$time == "2020-03-06","z.N"]
}
prop_infected
summary(prop_infected)
summary(prop_infected*100)
run <- "fitting_lourenco1/"
chains <- load_mcmc_chains(paste0(top_wd, "/chains2/",run),parTab,FALSE,1,mcmcPars2["adaptive_period"])
chain <- as.data.frame(chains[[2]])
chain$sampno <- 1:nrow(chain)
samps <- sample(unique(chain$sampno), 100)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(100)
rhos <- numeric(100)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
lines(res$z.N~res$time)
rhos[i] <- pars["rho"]
prop_infected[i] <- res[res$time == "2020-03-06","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
pars
t_long
res
res[res$time < "2020-03-06",]
pars
1/pars["sigma"]
res[res$time < "2020-03-06","z.N"]
res[res$time < "2020-03-06","z.N"]
plot(res[res$time < "2020-03-06","z.N"])
plot(res[res$time < "2020-03-19","z.N"])
max(res[res$time < "2020-03-19","z.N"])
prop_infected <- numeric(100)
rhos <- numeric(100)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
lines(res$z.N~res$time)
rhos[i] <- pars["rho"]
prop_infected[i] <- res[res$time == "2020-03-19","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
## Calculate 95% CI on proportion infected
setwd(top_wd)
setwd("chains2")
run <- "fitting_lourenco2/"
chains <- load_mcmc_chains(paste0(top_wd, "/chains2/",run),parTab,FALSE,1,mcmcPars2["adaptive_period"])
chain <- as.data.frame(chains[[2]])
chain$sampno <- 1:nrow(chain)
samps <- sample(unique(chain$sampno), 100)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(100)
rhos <- numeric(100)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
lines(res$z.N~res$time)
rhos[i] <- pars["rho"]
prop_infected[i] <- res[res$time == "2020-03-19","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
samps <- sample(unique(chain$sampno), 1000)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(1000)
rhos <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
prop_infected[i] <- res[res$time == "2020-03-19","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
hist(prop_infected)
## Calculate 95% CI on proportion infected
setwd(top_wd)
setwd("chains2")
run <- "fitting_lourenco1/"
chains <- load_mcmc_chains(paste0(top_wd, "/chains2/",run),parTab,FALSE,1,mcmcPars2["adaptive_period"])
chain <- as.data.frame(chains[[2]])
chain$sampno <- 1:nrow(chain)
samps <- sample(unique(chain$sampno), 1000)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(1000)
rhos <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
prop_infected[i] <- res[res$time == "2020-03-19","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
prop_infected <- numeric(1000)
rhos <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
prop_infected[i] <- res[res$time == "2020-03-20","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
mean(rhos)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-20","z.N"]
}
hist(t0s)
mean(t0s)
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-19","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-05","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
setwd(top_wd)
setwd("chains2")
run <- "fitting_lourenco2/"
chains <- load_mcmc_chains(paste0(top_wd, "/chains2/",run),parTab,FALSE,1,mcmcPars2["adaptive_period"])
chain <- as.data.frame(chains[[2]])
chain$sampno <- 1:nrow(chain)
samps <- sample(unique(chain$sampno), 1000)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-05","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
t0s
mean(t0s)
prop_infected
hist(prop_infected)
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-19","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
hist(prop_infected)
get_best_pars(chain)
pars <- get_best_pars(chain)
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
res[res$time == "2020-03-19","z.N"]
## Calculate 95% CI on proportion infected
setwd(top_wd)
setwd("chains2")
run <- "fitting_lourenco1/"
chains <- load_mcmc_chains(paste0(top_wd, "/chains2/",run),parTab,FALSE,1,mcmcPars2["adaptive_period"])
chain <- as.data.frame(chains[[2]])
chain$sampno <- 1:nrow(chain)
samps <- sample(unique(chain$sampno), 1000)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-19","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
mean(prop_infected)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + floor(t0))) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-19","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
samps <- sample(unique(chain$sampno), 1000)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-19","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
samps <- sample(unique(chain$sampno), 1000)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-21","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
## Calculate 95% CI on proportion infected
setwd(top_wd)
setwd("chains2")
run <- "fitting_lourenco2/"
chains <- load_mcmc_chains(paste0(top_wd, "/chains2/",run),parTab,FALSE,1,mcmcPars2["adaptive_period"])
chain <- as.data.frame(chains[[2]])
chain$sampno <- 1:nrow(chain)
samps <- sample(unique(chain$sampno), 1000)
solve_model2 <- function(pars, t){
N <- pars["N"]
psi <- pars["psi"]
t0 <- pars["t0"]
## Note starting conditions for population size - we're working per capita here
results <- as.data.frame(deSolve::ode(y=c(y=1/N,z=1/N,Dead=0),
times=t, func=SIR_odes,
parms=pars))
## To solve for real time, shift forward by t0 days
predicted <- results %>%
mutate(time = as.integer(time + t0)) %>%
mutate(time = as.Date(time, origin="2020-01-01"))
return(predicted)
}
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-21","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
prop_infected <- numeric(1000)
rhos <- numeric(1000)
t0s <- numeric(1000)
plot(res$z.N~res$time,type='l',ylim=c(0,1))
for(i in seq_along(samps)){
pars <- get_index_par(chain, samps[i])
res <- solve_model2(pars, t_long)
rhos[i] <- pars["rho"]
t0s[i] <- pars["t0"]
prop_infected[i] <- res[res$time == "2020-03-22","z.N"]
}
print(paste0("Proportion immune: ", quantile(prop_infected,c(0.025,0.5, 0.975))*100))
